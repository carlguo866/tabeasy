# Generated by Django 3.2.14 on 2022-07-21 03:51

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import django_better_admin_arrayfield.models.fields


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('accounts', '0005_auto_20220720_1740'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('raw_password', models.CharField(default='THIS_IS_NOT_RECORDED', help_text='A read-only field to record password only for development.', max_length=128)),
                ('is_judge', models.BooleanField(default=False)),
                ('is_team', models.BooleanField(default=True)),
                ('is_tab', models.BooleanField(default=False)),
                ('team_name', models.CharField(default='PPMT Team', max_length=100)),
                ('division', models.CharField(choices=[('div_1', 'Disney'), ('div_2', 'Universal')], max_length=100)),
                ('school', models.CharField(default='placeholder', max_length=100)),
                ('team_roster', django_better_admin_arrayfield.models.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, null=True, size=10)),
                ('sides', django_better_admin_arrayfield.models.fields.ArrayField(base_field=models.CharField(choices=[('P', 'Prosecution'), ('D', 'Defense')], max_length=1), blank=True, null=True, size=4)),
                ('ballots', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('cs', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('pd', models.IntegerField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.DeleteModel(
            name='Team',
        ),
    ]
